title: Type Systems for Domain-specific Langauges
author: Reiner Jung, Christian Schneider

sec: Motivation

> DSL Projects

'Large DSL Project
- <1-> Goal: DSL for railway control centers
- <2-> Feature Driven
- <3-> DSLs for various purposes
- <4-> But one XML output file (PLCOpen.xml)

$+<5->{'Agile grammar development
# <5-> Domain analysis
# <6-> Grammar development
# <7-> Evaluation with users and case studies
# <8-> Improving domain knowledge 
# <8-> goto 2
}
$+<9->{'Not \textbf{so} agile
- Generator development
}

> DSL Development

'Problems
- <1-> Development of semantic checks 
- <2-> Generator composition
- <3-> Mapping of source to target language 
  -  data structures and 
  -  expressions

$+<4->{'Result
- <4-> Incomplete generators
- <5-> Unmaintainable generator after 2 years
- <6-> Language evolution not possible
}

> Solution

'Question: How could we improve generator development?

$+<2->{'Idea
- Look into compiler development techniques
- <3-> Adapt techniques for DSL development
- <4-> Integrate with Xtext
}

sec: Related Work

> Type Checking

$+<1->{'Xtext/TS
- Type system framework
- DSL to write type checker
- Compact notation
- Limited typing features
}

$+<2->{'XSemantics
- DSL to define type systems
- Rich syntax
- Compact notation
- Uses type system terminology (judgement, rule, \dots)
}

> Xbase

$+<1->{'Features
- Xtext-based expression framework
- Uses Java-type system
- Provides Java type checking
- Provides partial code generation
}

$+<2->{'Downside
- Works only with Java
- All types are like Java-types
}

sec: Approach

> Code Generation

anim:1,2,3,4,5,6,7,8,9[width=\textwidth] animations/language-stack

> Concept Selection

'Concept A: Generic Approach
- Source and target type system different
- Different targets

'Concept B1: 
- Source and target type system different
- Target language: XMI or XML

'Concept B2:
- Source and target type system different
- Target language: Text (C, Fortran, Java, \ldots)

'Concept C
- Source and target type system similar
- Target language: Text

> Meta-Modeling 

anim:1,2,3,4,5,6,7,8,9,10,11,12[width=\textwidth] animations/taxonomy

> Base Type Integration

'Enumeration: Base type declaration
-- Java - [1(2) 2(4,5,6)]
public enum BaseTypes {
   BOOLEAN, INT, FLOAT, STRING; /* base types */

   public String lowerCaseName() {
      return this.name().toLowerCase();
   }
}
--

\vskip10mm
'From our example application: \url{http://build.se.informatik.uni-kiel.de/de.cau.cs.se.lad.git}

> Base Type Integration

'Embedding into Xtext
anim:1,2,3,4,5[width=\textwidth] animations/type-system-overview

> Grammar

'Types
-- Xtext - [1(1,4,6) 2(2) 3(4,5) 4(8)]
Type returns type::Type: BaseType | UserType | ArrayType ;
UserType returns type::UserType: ClassType | RecordType ;

TypeReference returns type::TypeReference:
{type::ArrayType} reference = [types::NamedType| ID] ( '[' sizes += INT ']' )+ |
{type::TypeReference} reference = [types::NamedType| ID]  ('.' remainder=TypeReference )? ;

MapType: {type::MapType} 'map' '<' key = TypeReference ',' value = TypeReference '>' ; 
--

> Grammar

'Property Declaration
-- Xtext - [1(1,2) 2(4,5,6,7)]
PropertyDeclaration returns type::PropertyDeclaration:
    modifiers += Modifier type = TypeReference name = ID ;

FunctionDeclaration returns type::FunctionDeclaration:
    modifiers += Modifier type = TypeReference name = ID 
    '(' (parameters += ParameterDeclaration (',' parameters += ParameterDeclaration)*)? ')'
    body = Body ;
--

> Type Resolution

'Base Types and Type Reference
-- Xtend - [2(1,2,3,4) 3(6,7,8,9)]
    /** Determine type of a literal: here a boolean value */
    def dispatch Type getActualType(BooleanValue value) {
        return typeProvider.findTypeByName("boolean");
    }

    /** Recursive method to follow type references */
    def dispatch Type getActualType(TypeReference ref) {
        return ref.remainder?.actualType?:ref.reference;
    }
--

- <1-> Use of Xtend signature-based dispatcher
- <2-> Dispatch method returns type for boolean values
- <3-> Dispatch method resolves type reference

> Type Resolution

'Declarations and Calls
-- Xtend - [1(1,2,3,4) 2(6,7,8,9) 3(11,12,13,14) 4(16,17,18,19)]
    /** Determine the type of a value, variable, or property declaration */
    def dispatch Type getActualType(ValueDeclaration decl) {
        return decl?.typeReference?.actualType;
    }    

    /** Determine the return type of a declared function */
    def dispatch Type getActualType(FunctionDeclaration decl) {
        return decl.type.actualType;
    }

    /** Determines the type of a value, variable, or property reference */
    def dispatch Type getActualType(ValueReference ref) {
        return ref?.reference?.actualType;
    }

    /** Determines the return type of a function call */
    def dispatch Type getActualType(FunctionCall call) {
        return call.functionRef.actualType;
    }
--

> Target Language Integration

> Type Transformation

sec: Conclusion

> Summary

> Outlook


